Takenocco
Javaでの中規模のゲーム制作を想定して提案されたデザインパターン。MVPモデル、クリーンアーキテクチャ、Androidアプリを参考にした。

【対象アプリ】
Java、Swingを多用する中規模デスクトップゲー

【理念】
・全ては画面から始まる
・コンソール画面だけでもデバッグできる程度まで情報と画面の隔離をする
・画面→プレゼンター→モデルの順番で依存するが、その逆方向に依存してはいけない
・ゲームなので思い切り画面をデザインすべきだ

【要素と概要】
app.Service
　アプリの中核。各場面の画面の管理や場面変更、エフェクトの開始と破棄、ポップアップの開始と破棄等の機能を持つ。
　上から順にポップアップ、エフェクト、場面の画面の順で表示されるべきである。
　いかなる場所からでもアクセスできるよう、インターフェース実装もしくはSingletonの適用をすべきだ。

Repository
　一つのアプリの中に唯一の実体しか持たないような情報を扱う。
　いかなる場所でもアクセスできるよう、Singletonの適用をすべきだ。

Screen
　その場面の見た目を作り、入力装置を配置する。使用者に見えるものである。
　Presenter を中に持つ。Presenter には入力装置からの操作イベントをそのまま通知する。IScreenを実装している必要がある。

IScreen
　その画面の内容を指定するメソッドが定義されているインターフェースで、Presenter はこれを参照している。

Presenter
　その場面での使用者の操作を解釈し処理に落とし込む作業と、その場面での情報を解釈し使用者に示す作業を受け持つ。
　Modelを中に持つ。Screenからの操作イベントを解釈し必要な処理をModelに要請する。
　IScreenを参照する。Modelの示す情報を解釈し、その表現型をそのメソッドらへ伝える。

ModelListener
　モデルの変更通知を受け取る。

Model
　その場面での様々な情報や処理を表現する。要請された処理をこなす。必要に応じて自らを変化させModelListenerを呼び出す。

DataTransfer
　場面の遷移時やポップアップの起動時等、異なる要素へ一時情報を転送する時に使われる。内部はMapで実装され、そのキーの値は安全のために共有されている定数を使用すべきである。
　バリューを取り出した後はほとんどの場合キャストする必要があるが、ここでは型チェックが行われない。そのため開発者はキーとそれに対応するバリューの型を念入りに確認すべきである。

【要素と関係】
app.Service has Screen
Screen implements IScreen, has Presenter 
Presenter implements ModelListener, has Model, knows IScreen
Model knows ModelListener

